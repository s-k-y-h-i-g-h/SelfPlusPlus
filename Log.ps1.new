param(
    [Parameter(Mandatory = $false)]
    [ValidateSet('Add','Update','Remove')]
    [string]$Action,

    [string]$Type,
    [string]$Category,
    [string]$Name,
    [string]$Amount,
    [string]$Value,
    [string]$Unit,
    [string]$Timestamp
)

function Get-LogFilePath {
    param(
        [switch]$Ensure
    )

    if ($IsWindows) {
        $base = $env:LOCALAPPDATA
        if (-not $base) { $base = [Environment]::GetFolderPath([Environment+SpecialFolder]::LocalApplicationData) }
        $dir = Join-Path -Path $base -ChildPath 'SelfPlusPlus'
    } elseif ($IsMacOS) {
        $userHomePath = $HOME
        if (-not $userHomePath) { $userHomePath = [Environment]::GetFolderPath([Environment+SpecialFolder]::UserProfile) }
        $dir = Join-Path -Path $userHomePath -ChildPath 'Library'
        $dir = Join-Path -Path $dir -ChildPath 'Application Support'
        $dir = Join-Path -Path $dir -ChildPath 'SelfPlusPlus'
    } else {
        $base = $env:XDG_DATA_HOME
        if (-not $base) {
            $userHomePath = $HOME
            if (-not $userHomePath) { $userHomePath = [Environment]::GetFolderPath([Environment+SpecialFolder]::UserProfile) }
            $base = Join-Path -Path $userHomePath -ChildPath '.local'
            $base = Join-Path -Path $base -ChildPath 'share'
        }
        $dir = Join-Path -Path $base -ChildPath 'SelfPlusPlus'
    }

    if ($Ensure) {
        if (-not (Test-Path -LiteralPath $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
        }
    }

    return (Join-Path -Path $dir -ChildPath 'Log.json')
}

function Show-Usage {
    Write-Host "Usage:" -ForegroundColor Yellow
    Write-Host "  .\Log2.ps1 -Action Add -Type <Consumption|Measurement> -Category <...> -Name <Name> [other params]" -ForegroundColor Yellow
    Write-Host "  .\Log2.ps1 -Action Update -Timestamp <ISO8601> [fields to update]" -ForegroundColor Yellow
    Write-Host "  .\Log2.ps1 -Action Remove -Timestamp <ISO8601>" -ForegroundColor Yellow
    Write-Host "" 
    Write-Host "Parameters for Add:" -ForegroundColor Yellow
    Write-Host "  -Type       Consumption | Measurement" -ForegroundColor Yellow
    Write-Host "  -Category   For Consumption: Substance | Stack; For Measurement: Vitals (others allowed)" -ForegroundColor Yellow
    Write-Host "  -Name       Name of the item/event" -ForegroundColor Yellow
    Write-Host "  -Timestamp  Optional ISO 8601 timestamp override for the new entry" -ForegroundColor Yellow
    Write-Host "  When Type=Consumption and Category=Substance: -Amount <string> is required" -ForegroundColor Yellow
    Write-Host "  When Type=Measurement: -Value <number> and -Unit <string> are required" -ForegroundColor Yellow
    Write-Host "" 
    Write-Host ("Default log file: {0}" -f (Get-LogFilePath)) -ForegroundColor Yellow
}

function Get-NormalizedTimestampString {
    param(
        [Parameter(Mandatory=$true)]$Value
    )

    if ($Value -is [datetimeoffset]) {
        return $Value.ToUniversalTime().ToString("o")
    } elseif ($Value -is [datetime]) {
        return $Value.ToUniversalTime().ToString("o")
    } else {
        $str = [string]$Value
        $dto = $null
        if ([datetimeoffset]::TryParse($str, [ref]$dto)) { return $dto.ToUniversalTime().ToString("o") }
        $dt = $null
        if ([datetime]::TryParse($str, [ref]$dt)) { return $dt.ToUniversalTime().ToString("o") }
        return $str
    }
}

function Read-LogData {
    param(
        [string]$FilePath = $(Get-LogFilePath -Ensure)
    )

    if (-not (Test-Path -LiteralPath $FilePath)) {
        return @()
    }

    try {
        $raw = Get-Content -LiteralPath $FilePath -Raw -ErrorAction Stop
        if ($null -eq $raw -or [string]::IsNullOrWhiteSpace([string]$raw)) { return @() }
        $parsed = $raw | ConvertFrom-Json -ErrorAction Stop
        if ($parsed -is [System.Array]) { return $parsed } else { return ,$parsed }
    } catch {
        throw "Failed to read log file: $($_.Exception.Message)"
    }
}

function Write-LogData {
    param(
        [Parameter(Mandatory=$true)][object[]]$Data,
        [string]$FilePath = $(Get-LogFilePath -Ensure)
    )

    try {
        $jsonOut = ConvertTo-Json -InputObject $Data -Depth 10
        Set-Content -LiteralPath $FilePath -Value $jsonOut -Encoding UTF8 -Force
    } catch {
        throw "Failed to write log file: $($_.Exception.Message)"
    }
}

function Add-LogEntry {
    param(
        [string]$FilePath = $(Get-LogFilePath -Ensure),
        [string]$Type,
        [string]$Category,
        [string]$Name,
        [string]$Amount,
        [string]$Value,
        [string]$Unit,
        [string]$Timestamp
    )

    if (-not $Type) { throw "-Type is required for Action 'Add'" }
    if (-not $Category) { throw "-Category is required for Action 'Add'" }
    if (-not $Name) { throw "-Name is required for Action 'Add'" }

    $entry = [ordered]@{
        Timestamp = if ($Timestamp) { $Timestamp } else { (Get-Date).ToUniversalTime().ToString("o") }
        Type      = $Type
        Category  = $Category
        Name      = $Name
    }

    if ($Type -eq 'Consumption') {
        if ($Category -eq 'Substance') {
            if (-not $Amount) { throw "-Amount is required when Type=Consumption and Category=Substance" }
            $entry.Amount = $Amount
        } elseif ($Category -eq 'Stack') {
            if ($Amount) { $entry.Amount = $Amount }
        } else {
            if ($Amount) { $entry.Amount = $Amount }
        }
    } elseif ($Type -eq 'Measurement') {
        if (-not $Value) { throw "-Value is required when Type=Measurement" }
        if (-not $Unit) { throw "-Unit is required when Type=Measurement" }

        $parsedValue = $null
        if (-not [double]::TryParse($Value, [ref]$parsedValue)) { throw "-Value must be a number (got: '$Value')" }
        $entry.Value = $parsedValue
        $entry.Unit = $Unit
    }

    $data = Read-LogData -FilePath $FilePath
    $data += [PSCustomObject]$entry
    Write-LogData -Data $data -FilePath $FilePath
}

function Update-LogEntry {
    param(
        [string]$FilePath = $(Get-LogFilePath -Ensure),
        [Parameter(Mandatory=$true)][string]$Timestamp,
        [string]$Type,
        [string]$Category,
        [string]$Name,
        [string]$Amount,
        [string]$Value,
        [string]$Unit
    )

    $data = Read-LogData -FilePath $FilePath
    $targetTs = Get-NormalizedTimestampString -Value $Timestamp
    $index = -1
    for ($i = 0; $i -lt $data.Count; $i++) {
        $existingTs = Get-NormalizedTimestampString -Value $data[$i].Timestamp
        if ($existingTs -eq $targetTs) { $index = $i; break }
    }

    if ($index -lt 0) { throw "No log entry found with Timestamp '$Timestamp'" }

    $entry = $data[$index] | Select-Object *
    if ($PSBoundParameters.ContainsKey('Type') -and $Type) { $entry.Type = $Type }
    if ($PSBoundParameters.ContainsKey('Category') -and $Category) { $entry.Category = $Category }
    if ($PSBoundParameters.ContainsKey('Name') -and $Name) { $entry.Name = $Name }

    if ($PSBoundParameters.ContainsKey('Amount')) {
        if ($null -ne $Amount -and $Amount -ne '') { $entry | Add-Member -NotePropertyName Amount -NotePropertyValue $Amount -Force } else { $entry.PSObject.Properties.Remove('Amount') | Out-Null }
    }

    if ($PSBoundParameters.ContainsKey('Value')) {
        if ($null -ne $Value -and $Value -ne '') {
            $parsed = $null
            if (-not [double]::TryParse($Value, [ref]$parsed)) { throw "-Value must be a number (got: '$Value')" }
            $entry | Add-Member -NotePropertyName Value -NotePropertyValue $parsed -Force
        } else {
            $entry.PSObject.Properties.Remove('Value') | Out-Null
        }
    }

    if ($PSBoundParameters.ContainsKey('Unit')) {
        if ($null -ne $Unit -and $Unit -ne '') { $entry | Add-Member -NotePropertyName Unit -NotePropertyValue $Unit -Force } else { $entry.PSObject.Properties.Remove('Unit') | Out-Null }
    }

    $data[$index] = $entry
    Write-LogData -Data $data -FilePath $FilePath
}

function Remove-LogEntry {
    param(
        [string]$FilePath = $(Get-LogFilePath -Ensure),
        [Parameter(Mandatory=$true)][string]$Timestamp
    )

    $data = Read-LogData -FilePath $FilePath
    $newData = @()
    $removed = $false
    $targetTs = Get-NormalizedTimestampString -Value $Timestamp
    foreach ($e in $data) {
        $existingTs = Get-NormalizedTimestampString -Value $e.Timestamp
        if ($existingTs -ne $targetTs) {
            $newData += $e
        } else {
            $removed = $true
        }
    }

    if (-not $removed) { throw "No log entry found with Timestamp '$Timestamp'" }
    Write-LogData -Data $newData -FilePath $FilePath
}

if (-not $PSBoundParameters.ContainsKey('Action')) {
    Show-Usage
    exit 1
}

switch ($Action) {
    'Add' {
        try {
            Add-LogEntry -Type $Type -Category $Category -Name $Name -Amount $Amount -Value $Value -Unit $Unit -Timestamp $Timestamp
        } catch {
            Write-Host ("Error: {0}" -f $_.Exception.Message) -ForegroundColor Red
            Show-Usage
            exit 1
        }
    }
    'Update' {
        if (-not $Timestamp) {
            Write-Host "Error: -Timestamp is required for Action 'Update'." -ForegroundColor Red
            Show-Usage
            exit 1
        }
        try {
            Update-LogEntry -Timestamp $Timestamp -Type $Type -Category $Category -Name $Name -Amount $Amount -Value $Value -Unit $Unit
        } catch {
            Write-Host ("Error: {0}" -f $_.Exception.Message) -ForegroundColor Red
            Show-Usage
            exit 1
        }
    }
    'Remove' {
        if (-not $Timestamp) {
            Write-Host "Error: -Timestamp is required for Action 'Remove'." -ForegroundColor Red
            Show-Usage
            exit 1
        }
        try {
            Remove-LogEntry -Timestamp $Timestamp
        } catch {
            Write-Host ("Error: {0}" -f $_.Exception.Message) -ForegroundColor Red
            Show-Usage
            exit 1
        }
    }
    Default {
        Write-Host "Error: Unsupported Action '$Action'." -ForegroundColor Red
        Show-Usage
        exit 1
    }
}


